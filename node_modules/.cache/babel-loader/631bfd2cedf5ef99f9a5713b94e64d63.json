{"ast":null,"code":"var _jsxFileName = \"/Users/aaronchongkh/ReactProjects/hotel-test2/src/pages/Lmao.tsx\";\nimport React from 'react';\nimport AWS from 'aws-sdk';\nimport Webcam from 'react-webcam';\n\nconst S3 = require('react-aws-s3');\n\nconst config = {\n  bucketName: 'facerecogdata2',\n  //dirName: 'media', /* optional */\n  region: 'us-east-2',\n  accessKeyId: 'AKIA2FBSYGBOR6A3TQGL',\n  secretAccessKey: 'myA5ldaLfSkcCwYKF6DiG4q5nG4lMkXmJCoyRKSp' // s3Url: 'https:/your-custom-s3-url.com/', /* optional */\n\n};\nvar s3Bucket = new AWS.S3({\n  params: {\n    Bucket: 'myBucket'\n  }\n});\nAWS.config.update({\n  accessKeyId: 'AKIA2FBSYGBOR6A3TQGL',\n  secretAccessKey: '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',\n  region: 'us-east-2'\n});\nconst dynamoDb = new AWS.DynamoDB.DocumentClient({\n  accessKeyId: config.accessKeyId,\n  secretAccessKey: config.secretAccessKey,\n  region: config.region\n});\nconst S3FileUpload = new S3(config);\nexport default class Lmao extends React.Component {\n  constructor(props) {\n    super(props);\n    this.webcamRef = void 0;\n\n    this.handleClick = () => {\n      var lmao = this.webcamRef.current.getScreenshot();\n      this.setState({\n        previewImg: lmao\n      });\n      const file_name = \"testname\";\n      const buf = new Buffer(this.state.previewImg.imageBinary.replace(/^data:image\\/\\w+;base64,/, \"\"), 'base64');\n      var data = {\n        Key: \"1234\",\n        Body: buf,\n        ContentEncoding: 'base64',\n        ContentType: 'image/jpeg'\n      };\n      var image1 = new Image();\n      image1.src = this.state.previewImg; // S3FileUpload.uploadFile(data).then((data: any) => console.log(data), window.alert(\"Uploaded\")).catch((err: any) => console.error(err));\n    };\n\n    this.handleUpload = () => {\n      const buf = new Buffer(this.state.previewImg.imageBinary.replace(/^data:image\\/\\w+;base64,/, \"\"), 'base64');\n      var data = {\n        Key: \"1234\",\n        Body: buf,\n        ContentEncoding: 'base64',\n        ContentType: 'image/jpeg'\n      };\n      var image1 = new Image();\n      image1.src = this.state.previewImg; // S3FileUpload.uploadFile(data).then((data: any) => console.log(data), window.alert(\"Uploaded\")).catch((err: any) => console.error(err));\n    };\n\n    this.showlmao = () => {\n      var image1 = new Image();\n      image1.src = this.state.previewImg;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"document.body.appendChild(image);\");\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleUpload = this.handleUpload.bind(this);\n    this.webcamRef = React.createRef();\n    this.state = {\n      startDate: new Date(),\n      endDate: new Date(),\n      roomType: \"\",\n      success: false,\n      url: \"\",\n      photoInput: false,\n      test: \"\",\n      previewImg: null,\n      tries: 0\n    };\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"lkjsfdlkj\"), React.createElement(Webcam, {\n      height: 360,\n      width: 1280,\n      screenshotFormat: \"image/jpeg\",\n      audio: false,\n      ref: this.webcamRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Capture pic\"), React.createElement(\"button\", {\n      onClick: this.handleUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Upload\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/aaronchongkh/ReactProjects/hotel-test2/src/pages/Lmao.tsx"],"names":["React","AWS","Webcam","S3","require","config","bucketName","region","accessKeyId","secretAccessKey","s3Bucket","params","Bucket","update","dynamoDb","DynamoDB","DocumentClient","S3FileUpload","Lmao","Component","constructor","props","webcamRef","handleClick","lmao","current","getScreenshot","setState","previewImg","file_name","buf","Buffer","state","imageBinary","replace","data","Key","Body","ContentEncoding","ContentType","image1","Image","src","handleUpload","showlmao","bind","createRef","startDate","Date","endDate","roomType","success","url","photoInput","test","tries","render","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport AWS, {DynamoDB} from 'aws-sdk';\nimport Webcam, { WebcamProps } from 'react-webcam';\nconst S3 = require('react-aws-s3')\n\ninterface IState {\n    startDate: Date;\n    endDate: Date;\n    roomType: string;\n    previewImg?: any;\n    success: boolean; \n    url: string;\n    photoInput: boolean;\n    test: string;\n    tries: number;\n}\n\nconst config = {\n    bucketName: 'facerecogdata2',\n    //dirName: 'media', /* optional */\n    region: 'us-east-2',\n    accessKeyId: 'AKIA2FBSYGBOR6A3TQGL',\n    secretAccessKey: 'myA5ldaLfSkcCwYKF6DiG4q5nG4lMkXmJCoyRKSp',\n    // s3Url: 'https:/your-custom-s3-url.com/', /* optional */\n}\nvar s3Bucket = new AWS.S3( { params: {Bucket: 'myBucket'} } );\nAWS.config.update({accessKeyId: 'AKIA2FBSYGBOR6A3TQGL', secretAccessKey: 'myA5ldaLfSkcCwYKF6DiG4q5nG4lMkXmJCoyRKSp', region: 'us-east-2'});\nconst dynamoDb = new AWS.DynamoDB.DocumentClient({accessKeyId: config.accessKeyId, secretAccessKey: config.secretAccessKey, region: config.region});\n\nconst S3FileUpload = new S3(config);\n\nexport default class Lmao extends React.Component<{}, IState> {\n    private webcamRef: React.RefObject<Webcam> & React.RefObject<HTMLVideoElement>;\n    constructor(props: {}) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleUpload = this.handleUpload.bind(this);\n        this.webcamRef = React.createRef();\n        this.state = {\n            startDate: new Date(),\n            endDate: new Date(),\n            roomType: \"\", \n            success: false, \n            url: \"\", \n            photoInput: false,\n            test: \"\", \n            previewImg: null,\n            tries: 0\n        }\n    }\n\n    handleClick = () => {\n        var lmao = this.webcamRef.current.getScreenshot();\n        this.setState({ \n            previewImg: lmao\n         });\n        const file_name = \"testname\";\n\n        const buf = new Buffer(this.state.previewImg.imageBinary.replace(/^data:image\\/\\w+;base64,/, \"\"),'base64')\n        var data = {\n            Key: \"1234\", \n            Body: buf,\n            ContentEncoding: 'base64',\n            ContentType: 'image/jpeg'\n        };\n\n        var image1 = new Image();\n        image1.src = this.state.previewImg;\n\n        // S3FileUpload.uploadFile(data).then((data: any) => console.log(data), window.alert(\"Uploaded\")).catch((err: any) => console.error(err));\n    }\n\n    handleUpload =() => {\n        const buf = new Buffer(this.state.previewImg.imageBinary.replace(/^data:image\\/\\w+;base64,/, \"\"),'base64')\n        var data = {\n            Key: \"1234\", \n            Body: buf,\n            ContentEncoding: 'base64',\n            ContentType: 'image/jpeg'\n        };\n\n        var image1 = new Image();\n        image1.src = this.state.previewImg;\n\n        // S3FileUpload.uploadFile(data).then((data: any) => console.log(data), window.alert(\"Uploaded\")).catch((err: any) => console.error(err));\n    }\n\n    showlmao = () => {\n        var image1 = new Image();\n        image1.src = this.state.previewImg;\n        return <div>\n            document.body.appendChild(image);\n        </div>\n    }\n\n    public render(): JSX.Element {\n        console.log(this.state)\n        return <div>\n            <h1>lkjsfdlkj</h1>\n            <Webcam\n            height={360}\n            width={1280}\n            screenshotFormat=\"image/jpeg\"\n            audio={false}\n            ref={this.webcamRef}\n            />\n            <button onClick={this.handleClick}>Capture pic</button>\n            <button onClick={this.handleUpload}>Upload</button>\n            <div>\n            {/* <img src={this.state.previewImg} /> */}\n            </div>\n        </div>\n    }\n}"]},"metadata":{},"sourceType":"module"}