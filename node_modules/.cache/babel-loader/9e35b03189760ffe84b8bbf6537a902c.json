{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash'),\n    util = require('util'),\n    AWS = require('aws-sdk'),\n    AWSDynamoDB = require('aws-sdk/clients/dynamodb'),\n    DocClient = require('aws-sdk/lib/dynamodb/document_client'),\n    Table = require('./table'),\n    Schema = require('./schema'),\n    serializer = require('./serializer'),\n    batch = require('./batch'),\n    Item = require('./item'),\n    createTables = require('./createTables'),\n    bunyan = require('bunyan');\n\nvar dynamo = module.exports;\nvar internals = {};\ndynamo.AWS = AWS;\ndynamo.log = bunyan.createLogger({\n  name: 'dynamo',\n  serializers: {\n    err: bunyan.stdSerializers.err\n  },\n  level: bunyan.FATAL\n});\n\ndynamo.dynamoDriver = internals.dynamoDriver = function (driver) {\n  if (driver) {\n    internals.dynamodb = driver;\n    var docClient = internals.loadDocClient(driver);\n    internals.updateDynamoDBDocClientForAllModels(docClient);\n  } else {\n    internals.dynamodb = internals.dynamodb || new AWSDynamoDB({\n      apiVersion: '2012-08-10'\n    });\n  }\n\n  return internals.dynamodb;\n};\n\ndynamo.documentClient = internals.documentClient = function (docClient) {\n  if (docClient) {\n    internals.docClient = docClient;\n    internals.dynamodb = docClient.service;\n    internals.updateDynamoDBDocClientForAllModels(docClient);\n  } else {\n    internals.loadDocClient();\n  }\n\n  return internals.docClient;\n};\n\ninternals.updateDynamoDBDocClientForAllModels = function (docClient) {\n  _.each(dynamo.models, function (model) {\n    model.config({\n      docClient: docClient\n    });\n  });\n};\n\ninternals.loadDocClient = function (driver) {\n  if (driver) {\n    internals.docClient = new DocClient({\n      service: driver\n    });\n  } else {\n    internals.docClient = internals.docClient || new DocClient({\n      service: internals.dynamoDriver()\n    });\n  }\n\n  return internals.docClient;\n};\n\ninternals.compileModel = function (name, schema) {\n  // extremly simple table names\n  var tableName = name.toLowerCase() + 's';\n  var log = dynamo.log.child({\n    model: name\n  });\n  var table = new Table(tableName, schema, serializer, internals.loadDocClient(), log);\n\n  var Model = function (attrs) {\n    Item.call(this, attrs, table);\n  };\n\n  util.inherits(Model, Item);\n  Model.get = _.bind(table.get, table);\n  Model.create = _.bind(table.create, table);\n  Model.update = _.bind(table.update, table);\n  Model.destroy = _.bind(table.destroy, table);\n  Model.query = _.bind(table.query, table);\n  Model.scan = _.bind(table.scan, table);\n  Model.parallelScan = _.bind(table.parallelScan, table);\n  Model.getItems = batch(table, serializer).getItems;\n  Model.batchGetItems = batch(table, serializer).getItems; // table ddl methods\n\n  Model.createTable = _.bind(table.createTable, table);\n  Model.updateTable = _.bind(table.updateTable, table);\n  Model.describeTable = _.bind(table.describeTable, table);\n  Model.deleteTable = _.bind(table.deleteTable, table);\n  Model.tableName = _.bind(table.tableName, table);\n  table.itemFactory = Model;\n  Model.log = log; // hooks\n\n  Model.after = _.bind(table.after, table);\n  Model.before = _.bind(table.before, table);\n  /* jshint camelcase:false */\n\n  Model.__defineGetter__('docClient', function () {\n    return table.docClient;\n  });\n\n  Model.config = function (config) {\n    config = config || {};\n\n    if (config.tableName) {\n      table.config.name = config.tableName;\n    }\n\n    if (config.docClient) {\n      table.docClient = config.docClient;\n    } else if (config.dynamodb) {\n      table.docClient = new DocClient({\n        service: config.dynamodb\n      });\n    }\n\n    return table.config;\n  };\n\n  return dynamo.model(name, Model);\n};\n\ninternals.addModel = function (name, model) {\n  dynamo.models[name] = model;\n  return dynamo.models[name];\n};\n\ndynamo.reset = function () {\n  dynamo.models = {};\n};\n\ndynamo.Set = function () {\n  return internals.docClient.createSet.apply(internals.docClient, arguments);\n};\n\ndynamo.define = function (modelName, config) {\n  if (_.isFunction(config)) {\n    throw new Error('define no longer accepts schema callback, migrate to new api');\n  }\n\n  var schema = new Schema(config);\n  var compiledTable = internals.compileModel(modelName, schema);\n  return compiledTable;\n};\n\ndynamo.model = function (name, model) {\n  if (model) {\n    internals.addModel(name, model);\n  }\n\n  return dynamo.models[name] || null;\n};\n\ndynamo.createTables = function (options, callback) {\n  if (typeof options === 'function' && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  var promise;\n\n  if (!callback && Promise) {\n    promise = new Promise(function (resolve, reject) {\n      callback = function (err, results) {\n        err ? reject(err) : resolve(results);\n      };\n    });\n  }\n\n  callback = callback || _.noop;\n  options = options || {};\n  createTables(dynamo.models, options, callback);\n  return promise;\n};\n\ndynamo.types = Schema.types;\ndynamo.reset();","map":null,"metadata":{},"sourceType":"script"}