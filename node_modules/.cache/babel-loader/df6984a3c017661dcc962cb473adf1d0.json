{"ast":null,"code":"'use strict';\n\nvar util = require('util'),\n    _ = require('lodash'),\n    events = require('events');\n\nvar internals = {};\n\ninternals.identity = function () {};\n\nvar Item = module.exports = function (attrs, table) {\n  events.EventEmitter.call(this);\n  this.table = table;\n  this.set(attrs || {});\n};\n\nutil.inherits(Item, events.EventEmitter);\n\nItem.prototype.get = function (key) {\n  if (key) {\n    return this.attrs[key];\n  } else {\n    return this.attrs;\n  }\n};\n\nItem.prototype.set = function (params) {\n  this.attrs = _.merge({}, this.attrs, params);\n  return this;\n};\n\nItem.prototype.save = function (callback) {\n  var self = this;\n  var promise;\n\n  if (!callback && Promise) {\n    promise = new Promise(function (resolve, reject) {\n      callback = function (err, results) {\n        err ? reject(err) : resolve(results);\n      };\n    });\n  }\n\n  callback = callback || internals.identity;\n  self.table.create(this.attrs, function (err, item) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.set(item.attrs);\n    return callback(null, item);\n  });\n  return promise;\n};\n\nItem.prototype.update = function (options, callback) {\n  var self = this;\n\n  if (typeof options === 'function' && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  var promise;\n\n  if (!callback && Promise) {\n    promise = new Promise(function (resolve, reject) {\n      callback = function (err, results) {\n        err ? reject(err) : resolve(results);\n      };\n    });\n  }\n\n  callback = callback || internals.identity;\n  self.table.update(this.attrs, options, function (err, item) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (item) {\n      self.set(item.attrs);\n    }\n\n    return callback(null, item);\n  });\n  return promise;\n};\n\nItem.prototype.destroy = function (options, callback) {\n  var self = this;\n\n  if (typeof options === 'function' && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  var promise;\n\n  if (!callback && Promise) {\n    promise = new Promise(function (resolve, reject) {\n      callback = function (err, results) {\n        err ? reject(err) : resolve(results);\n      };\n    });\n  }\n\n  callback = callback || internals.identity;\n  self.table.destroy(this.attrs, options, callback);\n  return promise;\n};\n\nItem.prototype.toJSON = function () {\n  return _.cloneDeep(this.attrs);\n};","map":null,"metadata":{},"sourceType":"script"}