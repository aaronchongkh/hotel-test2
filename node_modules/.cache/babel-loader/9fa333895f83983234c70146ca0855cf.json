{"ast":null,"code":"'use strict';\n\nvar toArray = require('stream-to-array');\n\nvar Promise = require('any-promise');\n\nvar onEnd = require('end-of-stream');\n\nmodule.exports = streamToPromise;\n\nfunction streamToPromise(stream) {\n  if (stream.readable) return fromReadable(stream);\n  if (stream.writable) return fromWritable(stream);\n  return Promise.resolve();\n}\n\nfunction fromReadable(stream) {\n  var promise = toArray(stream); // Ensure stream is in flowing mode\n\n  if (stream.resume) stream.resume();\n  return promise.then(function concat(parts) {\n    if (stream._readableState && stream._readableState.objectMode) {\n      return parts;\n    }\n\n    return Buffer.concat(parts.map(bufferize));\n  });\n}\n\nfunction fromWritable(stream) {\n  return new Promise(function (resolve, reject) {\n    onEnd(stream, function (err) {\n      (err ? reject : resolve)(err);\n    });\n  });\n}\n\nfunction bufferize(chunk) {\n  return Buffer.isBuffer(chunk) ? chunk : new Buffer(chunk);\n}","map":null,"metadata":{},"sourceType":"script"}