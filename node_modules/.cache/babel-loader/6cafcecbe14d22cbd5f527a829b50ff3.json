{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash'),\n    utils = require('./utils'),\n    DocClient = require('aws-sdk/lib/dynamodb/document_client');\n\nvar serializer = module.exports;\nvar internals = {};\ninternals.docClient = new DocClient();\n\ninternals.createSet = function (value) {\n  if (_.isArray(value)) {\n    return internals.docClient.createSet(value);\n  } else {\n    return internals.docClient.createSet([value]);\n  }\n};\n\nvar serialize = internals.serialize = {\n  binary: function (value) {\n    if (_.isString(value)) {\n      return utils.strToBin(value);\n    }\n\n    return value;\n  },\n  date: function (value) {\n    if (_.isDate(value)) {\n      return value.toISOString();\n    } else {\n      return new Date(value).toISOString();\n    }\n  },\n  boolean: function (value) {\n    if (value && value !== 'false') {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  stringSet: function (value) {\n    return internals.createSet(value, 'S');\n  },\n  numberSet: function (value) {\n    return internals.createSet(value, 'N');\n  },\n  binarySet: function (value) {\n    var bins = value;\n\n    if (!_.isArray(value)) {\n      bins = [value];\n    }\n\n    var vals = _.map(bins, serialize.binary);\n\n    return internals.createSet(vals, 'B');\n  }\n};\n\ninternals.deserializeAttribute = function (value) {\n  if (_.isObject(value) && _.isFunction(value.detectType) && _.isArray(value.values)) {\n    // value is a Set object from document client\n    return value.values;\n  } else {\n    return value;\n  }\n};\n\ninternals.serializeAttribute = serializer.serializeAttribute = function (value, type, options) {\n  if (!type) {\n    // if type is unknown, possibly because its an dynamic key return given value\n    return value;\n  }\n\n  if (_.isNull(value)) {\n    return null;\n  }\n\n  options = options || {};\n\n  switch (type) {\n    case 'DATE':\n      return serialize.date(value);\n\n    case 'BOOL':\n      return serialize.boolean(value);\n\n    case 'B':\n      return serialize.binary(value);\n\n    case 'NS':\n      return serialize.numberSet(value);\n\n    case 'SS':\n      return serialize.stringSet(value);\n\n    case 'BS':\n      return serialize.binarySet(value);\n\n    default:\n      return value;\n  }\n};\n\nserializer.buildKey = function (hashKey, rangeKey, schema) {\n  var obj = {};\n\n  if (_.isPlainObject(hashKey)) {\n    obj[schema.hashKey] = hashKey[schema.hashKey];\n\n    if (schema.rangeKey && !_.isNull(hashKey[schema.rangeKey]) && !_.isUndefined(hashKey[schema.rangeKey])) {\n      obj[schema.rangeKey] = hashKey[schema.rangeKey];\n    }\n\n    _.each(schema.globalIndexes, function (keys) {\n      if (_.has(hashKey, keys.hashKey)) {\n        obj[keys.hashKey] = hashKey[keys.hashKey];\n      }\n\n      if (_.has(hashKey, keys.rangeKey)) {\n        obj[keys.rangeKey] = hashKey[keys.rangeKey];\n      }\n    });\n\n    _.each(schema.secondaryIndexes, function (keys) {\n      if (_.has(hashKey, keys.rangeKey)) {\n        obj[keys.rangeKey] = hashKey[keys.rangeKey];\n      }\n    });\n  } else {\n    obj[schema.hashKey] = hashKey;\n\n    if (schema.rangeKey && !_.isNull(rangeKey) && !_.isUndefined(rangeKey)) {\n      obj[schema.rangeKey] = rangeKey;\n    }\n  }\n\n  return serializer.serializeItem(schema, obj);\n};\n\nserializer.serializeItem = function (schema, item, options) {\n  options = options || {};\n\n  var serialize = function (item, datatypes) {\n    datatypes = datatypes || {};\n\n    if (!item) {\n      return null;\n    }\n\n    return _.reduce(item, function (result, val, key) {\n      if (options.expected && _.isObject(val) && _.isBoolean(val.Exists)) {\n        result[key] = val;\n        return result;\n      }\n\n      if (_.isPlainObject(val)) {\n        result[key] = serialize(val, datatypes[key]);\n        return result;\n      }\n\n      if (_.isArray(val) && _.isArray(datatypes[key])) {\n        result[key] = _.map(val, function (item) {\n          return serialize(item, datatypes[key][0]);\n        });\n        return result;\n      }\n\n      var attr = internals.serializeAttribute(val, datatypes[key], options);\n\n      if (!_.isNull(attr) || options.returnNulls) {\n        if (options.expected) {\n          result[key] = {\n            'Value': attr\n          };\n        } else {\n          result[key] = attr;\n        }\n      }\n\n      return result;\n    }, {});\n  };\n\n  return serialize(item, schema._modelDatatypes);\n};\n\nserializer.serializeItemForUpdate = function (schema, action, item) {\n  var datatypes = schema._modelDatatypes;\n  var data = utils.omitPrimaryKeys(schema, item);\n  return _.reduce(data, function (result, value, key) {\n    if (_.isNull(value)) {\n      result[key] = {\n        Action: 'DELETE'\n      };\n    } else if (_.isPlainObject(value) && value.$add) {\n      result[key] = {\n        Action: 'ADD',\n        Value: internals.serializeAttribute(value.$add, datatypes[key])\n      };\n    } else if (_.isPlainObject(value) && value.$del) {\n      result[key] = {\n        Action: 'DELETE',\n        Value: internals.serializeAttribute(value.$del, datatypes[key])\n      };\n    } else {\n      result[key] = {\n        Action: action,\n        Value: internals.serializeAttribute(value, datatypes[key])\n      };\n    }\n\n    return result;\n  }, {});\n};\n\nserializer.deserializeItem = function (item) {\n  if (_.isNull(item)) {\n    return null;\n  }\n\n  var formatter = function (data) {\n    var map = _.mapValues;\n\n    if (_.isArray(data)) {\n      map = _.map;\n    }\n\n    return map(data, function (value) {\n      var result;\n\n      if (_.isPlainObject(value)) {\n        result = formatter(value);\n      } else if (_.isArray(value)) {\n        result = formatter(value);\n      } else {\n        result = internals.deserializeAttribute(value);\n      }\n\n      return result;\n    });\n  };\n\n  return formatter(item);\n};","map":null,"metadata":{},"sourceType":"script"}