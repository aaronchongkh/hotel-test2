{"ast":null,"code":"'use strict';\n\nvar Joi = require('joi'),\n    nodeUUID = require('node-uuid'),\n    _ = require('lodash');\n\nvar internals = {};\ninternals.secondaryIndexSchema = Joi.object().keys({\n  hashKey: Joi.string().when('type', {\n    is: 'local',\n    then: Joi.ref('$hashKey'),\n    otherwise: Joi.required()\n  }),\n  rangeKey: Joi.string().when('type', {\n    is: 'local',\n    then: Joi.required(),\n    otherwise: Joi.optional()\n  }),\n  type: Joi.string().valid('local', 'global').required(),\n  name: Joi.string().required(),\n  projection: Joi.object(),\n  readCapacity: Joi.number().when('type', {\n    is: 'global',\n    then: Joi.optional(),\n    otherwise: Joi.forbidden()\n  }),\n  writeCapacity: Joi.number().when('type', {\n    is: 'global',\n    then: Joi.optional(),\n    otherwise: Joi.forbidden()\n  })\n});\ninternals.configSchema = Joi.object().keys({\n  hashKey: Joi.string().required(),\n  rangeKey: Joi.string(),\n  tableName: Joi.alternatives().try(Joi.string(), Joi.func()),\n  indexes: Joi.array().items(internals.secondaryIndexSchema),\n  schema: Joi.object(),\n  timestamps: Joi.boolean().default(false),\n  createdAt: Joi.alternatives().try(Joi.string(), Joi.boolean()),\n  updatedAt: Joi.alternatives().try(Joi.string(), Joi.boolean())\n}).required();\n\ninternals.wireType = function (key) {\n  switch (key) {\n    case 'string':\n      return 'S';\n\n    case 'date':\n      return 'DATE';\n\n    case 'number':\n      return 'N';\n\n    case 'boolean':\n      return 'BOOL';\n\n    case 'binary':\n      return 'B';\n\n    case 'array':\n      return 'L';\n\n    default:\n      return null;\n  }\n};\n\ninternals.findDynamoTypeMetadata = function (data) {\n  var meta = _.find(data.meta, function (data) {\n    return _.isString(data.dynamoType);\n  });\n\n  if (meta) {\n    return meta.dynamoType;\n  } else {\n    return internals.wireType(data.type);\n  }\n};\n\ninternals.parseDynamoTypes = function (data) {\n  if (_.isPlainObject(data) && data.type === 'object' && _.isPlainObject(data.children)) {\n    return internals.parseDynamoTypes(data.children);\n  }\n\n  var mapped = _.reduce(data, function (result, val, key) {\n    if (val.type === 'object' && _.isPlainObject(val.children)) {\n      result[key] = internals.parseDynamoTypes(val.children);\n    } else if (val.type === 'array' && _.isArray(val.items) && val.items.length && (val.meta === undefined || val.meta.length < 1)) {\n      result[key] = _.map(val.items, internals.parseDynamoTypes);\n    } else {\n      result[key] = internals.findDynamoTypeMetadata(val);\n    }\n\n    return result;\n  }, {});\n\n  return mapped;\n};\n\nvar Schema = module.exports = function (config) {\n  this.secondaryIndexes = {};\n  this.globalIndexes = {};\n  var context = {\n    hashKey: config.hashKey\n  };\n  var self = this;\n  Joi.validate(config, internals.configSchema, {\n    context: context\n  }, function (err, data) {\n    if (err) {\n      var msg = 'Invalid table schema, check your config ';\n      throw new Error(msg + err.annotate());\n    }\n\n    self.hashKey = data.hashKey;\n    self.rangeKey = data.rangeKey;\n    self.tableName = data.tableName;\n    self.timestamps = data.timestamps;\n    self.createdAt = data.createdAt;\n    self.updatedAt = data.updatedAt;\n\n    if (data.indexes) {\n      self.globalIndexes = _.chain(data.indexes).filter({\n        type: 'global'\n      }).keyBy('name').value();\n      self.secondaryIndexes = _.chain(data.indexes).filter({\n        type: 'local'\n      }).keyBy('name').value();\n    }\n\n    if (data.schema) {\n      self._modelSchema = _.isPlainObject(data.schema) ? Joi.object().keys(data.schema) : data.schema;\n    } else {\n      self._modelSchema = Joi.object();\n    }\n\n    if (self.timestamps) {\n      var valids = {};\n      var createdAtParamName = 'createdAt';\n      var updatedAtParamName = 'updatedAt';\n\n      if (self.createdAt) {\n        if (_.isString(self.createdAt)) {\n          createdAtParamName = self.createdAt;\n        }\n      }\n\n      if (self.updatedAt) {\n        if (_.isString(self.updatedAt)) {\n          updatedAtParamName = self.updatedAt;\n        }\n      }\n\n      if (self.createdAt !== false) {\n        valids[createdAtParamName] = Joi.date();\n      }\n\n      if (self.updatedAt !== false) {\n        valids[updatedAtParamName] = Joi.date();\n      }\n\n      var extended = self._modelSchema.keys(valids);\n\n      self._modelSchema = extended;\n    }\n\n    self._modelDatatypes = internals.parseDynamoTypes(self._modelSchema.describe());\n  });\n};\n\nSchema.types = {};\n\nSchema.types.stringSet = function () {\n  var set = Joi.array().items(Joi.string()).meta({\n    dynamoType: 'SS'\n  });\n  return set;\n};\n\nSchema.types.numberSet = function () {\n  var set = Joi.array().items(Joi.number()).meta({\n    dynamoType: 'NS'\n  });\n  return set;\n};\n\nSchema.types.binarySet = function () {\n  var set = Joi.array().items(Joi.binary(), Joi.string()).meta({\n    dynamoType: 'BS'\n  });\n  return set;\n}; // Functions which can accept a single argument must be wrapped to avoid the\n// Joi context object from being passed as the first argument\n//\n// see :https://github.com/hapijs/joi/blob/v10.5.0/API.md#anydefaultvalue-description\n\n\nSchema.types.uuid = function () {\n  return Joi.string().guid({\n    version: 'uuidv4'\n  }).default(function () {\n    return nodeUUID.v4();\n  }, 'nodeUUID.v4()');\n};\n\nSchema.types.timeUUID = function () {\n  return Joi.string().guid({\n    version: 'uuidv1'\n  }).default(function () {\n    return nodeUUID.v4();\n  }, 'nodeUUID.v1()');\n};\n\nSchema.prototype.validate = function (params, options) {\n  options = options || {};\n  return Joi.validate(params, this._modelSchema, options);\n};\n\ninternals.invokeDefaultFunctions = function (data) {\n  return _.mapValues(data, function (val) {\n    if (_.isFunction(val)) {\n      return val.call(null);\n    } else if (_.isPlainObject(val)) {\n      return internals.invokeDefaultFunctions(val);\n    } else {\n      return val;\n    }\n  });\n};\n\nSchema.prototype.applyDefaults = function (data) {\n  var result = this.validate(data, {\n    abortEarly: false\n  });\n  return internals.invokeDefaultFunctions(result.value);\n};","map":null,"metadata":{},"sourceType":"script"}