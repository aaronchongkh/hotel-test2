{"ast":null,"code":"var Promise = require('any-promise');\n\nmodule.exports = function (stream, done) {\n  if (!stream) {\n    // no arguments, meaning stream = this\n    stream = this;\n  } else if (typeof stream === 'function') {\n    // stream = this, callback passed\n    done = stream;\n    stream = this;\n  }\n\n  var deferred;\n  if (!stream.readable) deferred = Promise.resolve([]);else deferred = new Promise(function (resolve, reject) {\n    // stream is already ended\n    if (!stream.readable) return resolve([]);\n    var arr = [];\n    stream.on('data', onData);\n    stream.on('end', onEnd);\n    stream.on('error', onEnd);\n    stream.on('close', onClose);\n\n    function onData(doc) {\n      arr.push(doc);\n    }\n\n    function onEnd(err) {\n      if (err) reject(err);else resolve(arr);\n      cleanup();\n    }\n\n    function onClose() {\n      resolve(arr);\n      cleanup();\n    }\n\n    function cleanup() {\n      arr = null;\n      stream.removeListener('data', onData);\n      stream.removeListener('end', onEnd);\n      stream.removeListener('error', onEnd);\n      stream.removeListener('close', onClose);\n    }\n  });\n\n  if (typeof done === 'function') {\n    deferred.then(function (arr) {\n      process.nextTick(function () {\n        done(null, arr);\n      });\n    }, done);\n  }\n\n  return deferred;\n};","map":null,"metadata":{},"sourceType":"script"}