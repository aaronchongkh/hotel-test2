{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash'),\n    Readable = require('stream').Readable,\n    streamToPromise = require('stream-to-promise'),\n    async = require('async'),\n    AWSUtil = require('aws-sdk/lib/util');\n\nvar utils = module.exports;\n\nutils.omitNulls = function (data) {\n  return _.omitBy(data, function (value) {\n    return _.isNull(value) || _.isUndefined(value) || _.isArray(value) && _.isEmpty(value) || _.isString(value) && _.isEmpty(value);\n  });\n};\n\nutils.mergeResults = function (responses, tableName) {\n  var result = {\n    Items: [],\n    ConsumedCapacity: {\n      CapacityUnits: 0,\n      TableName: tableName\n    },\n    Count: 0,\n    ScannedCount: 0\n  };\n\n  var merged = _.reduce(responses, function (memo, resp) {\n    if (!resp) {\n      return memo;\n    }\n\n    memo.Count += resp.Count || 0;\n    memo.ScannedCount += resp.ScannedCount || 0;\n\n    if (resp.ConsumedCapacity) {\n      memo.ConsumedCapacity.CapacityUnits += resp.ConsumedCapacity.CapacityUnits || 0;\n    }\n\n    if (resp.Items) {\n      memo.Items = memo.Items.concat(resp.Items);\n    }\n\n    if (resp.LastEvaluatedKey) {\n      memo.LastEvaluatedKey = resp.LastEvaluatedKey;\n    }\n\n    return memo;\n  }, result);\n\n  if (merged.ConsumedCapacity.CapacityUnits === 0) {\n    delete merged.ConsumedCapacity;\n  }\n\n  if (merged.ScannedCount === 0) {\n    delete merged.ScannedCount;\n  }\n\n  return merged;\n};\n\nutils.paginatedRequest = function (self, runRequestFunc, callback) {\n  // if callback isn't passed switch to stream\n  if (!callback) {\n    return utils.streamRequest(self, runRequestFunc);\n  }\n\n  var lastEvaluatedKey = null;\n  var responses = [];\n  var retry = false;\n\n  var doFunc = function (callback) {\n    if (lastEvaluatedKey) {\n      self.startKey(lastEvaluatedKey);\n    }\n\n    runRequestFunc(self.buildRequest(), function (err, resp) {\n      if (err && err.retryable) {\n        retry = true;\n        return setImmediate(callback);\n      } else if (err) {\n        retry = false;\n        return setImmediate(callback, err);\n      }\n\n      retry = false;\n      lastEvaluatedKey = resp.LastEvaluatedKey;\n      responses.push(resp);\n      return setImmediate(callback);\n    });\n  };\n\n  var testFunc = function () {\n    return self.options.loadAll && lastEvaluatedKey || retry;\n  };\n\n  var resulsFunc = function (err) {\n    if (err) {\n      return callback(err);\n    }\n\n    return callback(null, utils.mergeResults(responses, self.table.tableName()));\n  };\n\n  async.doWhilst(doFunc, testFunc, resulsFunc);\n};\n\nutils.streamRequest = function (self, runRequestFunc) {\n  var lastEvaluatedKey = null;\n  var performRequest = true;\n  var stream = utils.promisifyStream(new Readable({\n    objectMode: true\n  }));\n\n  var startRead = function () {\n    if (!performRequest) {\n      return;\n    }\n\n    if (lastEvaluatedKey) {\n      self.startKey(lastEvaluatedKey);\n    }\n\n    runRequestFunc(self.buildRequest(), function (err, resp) {\n      if (err && err.retryable) {\n        return setTimeout(startRead, 1000);\n      } else if (err) {\n        return stream.emit('error', err);\n      } else {\n        lastEvaluatedKey = resp.LastEvaluatedKey;\n\n        if (!self.options.loadAll || !lastEvaluatedKey) {\n          performRequest = false;\n        }\n\n        stream.push(resp);\n\n        if (!self.options.loadAll || !lastEvaluatedKey) {\n          stream.push(null);\n        }\n      }\n    });\n  };\n\n  stream._read = function () {\n    startRead();\n  };\n\n  return stream;\n};\n\nutils.promisifyStream = function (stream) {\n  if (!Promise) {\n    // If promises are not supported, do not support the promise() method on streams.\n    return stream;\n  }\n\n  stream.promise = function () {\n    return streamToPromise(stream);\n  };\n\n  return stream;\n};\n\nutils.omitPrimaryKeys = function (schema, params) {\n  return _.omit(params, schema.hashKey, schema.rangeKey);\n};\n\nutils.strToBin = function (value) {\n  if (typeof value !== 'string') {\n    var StrConversionError = 'Need to pass in string primitive to be converted to binary.';\n    throw new Error(StrConversionError);\n  }\n\n  if (AWSUtil.isBrowser()) {\n    var len = value.length;\n    var bin = new Uint8Array(new ArrayBuffer(len));\n\n    for (var i = 0; i < len; i++) {\n      bin[i] = value.charCodeAt(i);\n    }\n\n    return bin;\n  } else {\n    return AWSUtil.Buffer(value);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}