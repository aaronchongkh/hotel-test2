{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash'),\n    expressions = require('./expressions'),\n    utils = require('./utils');\n\nvar internals = {};\n\ninternals.keyCondition = function (keyName, schema, query) {\n  var f = function (operator) {\n    return function ()\n    /*values*/\n    {\n      var copy = [].slice.call(arguments);\n\n      var existingValueKeys = _.keys(query.request.ExpressionAttributeValues);\n\n      var args = [keyName, operator, existingValueKeys].concat(copy);\n      var cond = expressions.buildFilterExpression.apply(null, args);\n      return query.addKeyCondition(cond);\n    };\n  };\n\n  return {\n    equals: f('='),\n    eq: f('='),\n    lte: f('<='),\n    lt: f('<'),\n    gte: f('>='),\n    gt: f('>'),\n    beginsWith: f('begins_with'),\n    between: f('BETWEEN')\n  };\n};\n\ninternals.queryFilter = function (keyName, schema, query) {\n  var f = function (operator) {\n    return function ()\n    /*values*/\n    {\n      var copy = [].slice.call(arguments);\n\n      var existingValueKeys = _.keys(query.request.ExpressionAttributeValues);\n\n      var args = [keyName, operator, existingValueKeys].concat(copy);\n      var cond = expressions.buildFilterExpression.apply(null, args);\n      return query.addFilterCondition(cond);\n    };\n  };\n\n  return {\n    equals: f('='),\n    eq: f('='),\n    ne: f('<>'),\n    lte: f('<='),\n    lt: f('<'),\n    gte: f('>='),\n    gt: f('>'),\n    null: f('attribute_not_exists'),\n    exists: f('attribute_exists'),\n    contains: f('contains'),\n    notContains: f('NOT contains'),\n    in: f('IN'),\n    beginsWith: f('begins_with'),\n    between: f('BETWEEN')\n  };\n};\n\ninternals.isUsingGlobalIndex = function (query) {\n  return query.request.IndexName && query.table.schema.globalIndexes[query.request.IndexName];\n};\n\nvar Query = module.exports = function (hashKey, table, serializer) {\n  this.hashKey = hashKey;\n  this.table = table;\n  this.serializer = serializer;\n  this.options = {\n    loadAll: false\n  };\n  this.request = {};\n};\n\nQuery.prototype.limit = function (num) {\n  if (num <= 0) {\n    throw new Error('Limit must be greater than 0');\n  }\n\n  this.request.Limit = num;\n  return this;\n};\n\nQuery.prototype.filterExpression = function (expression) {\n  this.request.FilterExpression = expression;\n  return this;\n};\n\nQuery.prototype.expressionAttributeValues = function (data) {\n  this.request.ExpressionAttributeValues = data;\n  return this;\n};\n\nQuery.prototype.expressionAttributeNames = function (data) {\n  this.request.ExpressionAttributeNames = data;\n  return this;\n};\n\nQuery.prototype.projectionExpression = function (data) {\n  this.request.ProjectionExpression = data;\n  return this;\n};\n\nQuery.prototype.usingIndex = function (name) {\n  this.request.IndexName = name;\n  return this;\n};\n\nQuery.prototype.consistentRead = function (read) {\n  if (!_.isBoolean(read)) {\n    read = true;\n  }\n\n  this.request.ConsistentRead = read;\n  return this;\n};\n\ninternals.addExpressionAttributes = function (request, condition) {\n  var expressionAttributeNames = _.merge({}, condition.attributeNames, request.ExpressionAttributeNames);\n\n  var expressionAttributeValues = _.merge({}, condition.attributeValues, request.ExpressionAttributeValues);\n\n  if (!_.isEmpty(expressionAttributeNames)) {\n    request.ExpressionAttributeNames = expressionAttributeNames;\n  }\n\n  if (!_.isEmpty(expressionAttributeValues)) {\n    request.ExpressionAttributeValues = expressionAttributeValues;\n  }\n};\n\nQuery.prototype.addKeyCondition = function (condition) {\n  internals.addExpressionAttributes(this.request, condition);\n\n  if (_.isString(this.request.KeyConditionExpression)) {\n    this.request.KeyConditionExpression = this.request.KeyConditionExpression + ' AND (' + condition.statement + ')';\n  } else {\n    this.request.KeyConditionExpression = '(' + condition.statement + ')';\n  }\n\n  return this;\n};\n\nQuery.prototype.addFilterCondition = function (condition) {\n  internals.addExpressionAttributes(this.request, condition);\n\n  if (_.isString(this.request.FilterExpression)) {\n    this.request.FilterExpression = this.request.FilterExpression + ' AND (' + condition.statement + ')';\n  } else {\n    this.request.FilterExpression = '(' + condition.statement + ')';\n  }\n\n  return this;\n};\n\nQuery.prototype.startKey = function (hashKey, rangeKey) {\n  this.request.ExclusiveStartKey = this.serializer.buildKey(hashKey, rangeKey, this.table.schema);\n  return this;\n};\n\nQuery.prototype.attributes = function (attrs) {\n  if (!_.isArray(attrs)) {\n    attrs = [attrs];\n  }\n\n  var expressionAttributeNames = _.reduce(attrs, function (result, attr) {\n    var path = '#' + attr;\n    result[path] = attr;\n    return result;\n  }, {});\n\n  this.request.ProjectionExpression = _.keys(expressionAttributeNames).join(',');\n  this.request.ExpressionAttributeNames = _.merge({}, expressionAttributeNames, this.request.ExpressionAttributeNames);\n  return this;\n};\n\nQuery.prototype.ascending = function () {\n  this.request.ScanIndexForward = true;\n  return this;\n};\n\nQuery.prototype.descending = function () {\n  this.request.ScanIndexForward = false;\n  return this;\n};\n\nQuery.prototype.select = function (value) {\n  this.request.Select = value;\n  return this;\n};\n\nQuery.prototype.returnConsumedCapacity = function (value) {\n  if (_.isUndefined(value)) {\n    value = 'TOTAL';\n  }\n\n  this.request.ReturnConsumedCapacity = value;\n  return this;\n};\n\nQuery.prototype.loadAll = function () {\n  this.options.loadAll = true;\n  return this;\n};\n\nQuery.prototype.where = function (keyName) {\n  return internals.keyCondition(keyName, this.table.schema, this);\n};\n\nQuery.prototype.filter = function (keyName) {\n  return internals.queryFilter(keyName, this.table.schema, this);\n};\n\nQuery.prototype.exec = function (callback) {\n  var self = this;\n  this.addKeyCondition(this.buildKey());\n\n  var runQuery = function (params, callback) {\n    self.table.runQuery(params, callback);\n  };\n\n  return utils.paginatedRequest(self, runQuery, callback);\n};\n\nQuery.prototype.buildKey = function () {\n  var key = this.table.schema.hashKey;\n\n  if (internals.isUsingGlobalIndex(this)) {\n    key = this.table.schema.globalIndexes[this.request.IndexName].hashKey;\n  }\n\n  var existingValueKeys = _.keys(this.request.ExpressionAttributeValues);\n\n  return expressions.buildFilterExpression(key, '=', existingValueKeys, this.hashKey);\n};\n\ninternals.formatAttributeValue = function (val) {\n  if (_.isDate(val)) {\n    return val.toISOString();\n  }\n\n  return val;\n};\n\nQuery.prototype.buildRequest = function () {\n  return _.merge({}, this.request, {\n    TableName: this.table.tableName()\n  });\n};","map":null,"metadata":{},"sourceType":"script"}