{"ast":null,"code":"'use strict';\n\nvar async = require('async'),\n    _ = require('lodash');\n\nvar internals = {};\n\ninternals.createTable = function (model, options, callback) {\n  options = options || {};\n  var tableName = model.tableName();\n  model.describeTable(function (err, data) {\n    if (_.isNull(data) || _.isUndefined(data)) {\n      model.log.info('creating table: %s', tableName);\n      return model.createTable(options, function (error) {\n        if (error) {\n          model.log.warn({\n            err: error\n          }, 'failed to create table %s: %s', tableName, error);\n          return callback(error);\n        }\n\n        model.log.info('waiting for table: %s to become ACTIVE', tableName);\n        internals.waitTillActive(model, callback);\n      });\n    } else {\n      model.updateTable(function (err) {\n        if (err) {\n          model.log.warn({\n            err: err\n          }, 'failed to update table %s: %s', tableName, err);\n          return callback(err);\n        }\n\n        model.log.info('waiting for table: %s to become ACTIVE', tableName);\n        internals.waitTillActive(model, callback);\n      });\n    }\n  });\n};\n\ninternals.waitTillActive = function (model, callback) {\n  var status = 'PENDING';\n  async.doWhilst(function (callback) {\n    model.describeTable(function (err, data) {\n      if (err) {\n        return callback(err);\n      }\n\n      status = data.Table.TableStatus;\n      setTimeout(callback, 1000);\n    });\n  }, function () {\n    return status !== 'ACTIVE';\n  }, function (err) {\n    return callback(err);\n  });\n};\n\nmodule.exports = function (models, config, callback) {\n  async.eachSeries(_.keys(models), function (key, callback) {\n    return internals.createTable(models[key], config[key], callback);\n  }, callback);\n};","map":null,"metadata":{},"sourceType":"script"}