{"ast":null,"code":"var _jsxFileName = \"/Users/aaronchongkh/ReactProjects/hotel-test2/src/components/Room.tsx\";\nimport React from 'react';\nimport defaultImg from \"../assets/images/room-1.jpeg\";\nimport { Link } from 'react-router-dom';\nconst Room = React.memo(props => {\n  const _props$room = props.room,\n        name = _props$room.name,\n        slug = _props$room.slug,\n        images = _props$room.images,\n        price = _props$room.price; // console.log(props);\n\n  return React.createElement(\"article\", {\n    className: \"room\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"img-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: images[0] || defaultImg,\n    alt: \"single room\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"price-top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"$\", price), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"per night\")), React.createElement(Link, {\n    to: \"/rooms/\".concat(slug),\n    className: \"btn-primary room-link\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"features\")), React.createElement(\"p\", {\n    className: \"room-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, name));\n});\nexport default Room; // React.memo\n// Class components can bail out from rendering when their input props are \n// the same using PureComponent or shouldComponentUpdate. Now you can do the \n// same with function components by wrapping them in React.memo.","map":{"version":3,"sources":["/Users/aaronchongkh/ReactProjects/hotel-test2/src/components/Room.tsx"],"names":["React","defaultImg","Link","Room","memo","props","room","name","slug","images","price"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAOA,MAAMC,IAA0B,GAAGH,KAAK,CAACI,IAAN,CAAYC,KAAD,IAAW;AAAA,sBACfA,KAAK,CAACC,IADS;AAAA,QAC7CC,IAD6C,eAC7CA,IAD6C;AAAA,QACvCC,IADuC,eACvCA,IADuC;AAAA,QACjCC,MADiC,eACjCA,MADiC;AAAA,QACzBC,KADyB,eACzBA,KADyB,EAErD;;AACA,SACI;AAAS,IAAA,SAAS,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,GAAG,EAAED,MAAM,CAAC,CAAD,CAAN,IAAaR,UAAvB;AAAmC,IAAA,GAAG,EAAC,aAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAMS,KAAN,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,CAFJ,EAMI,oBAAC,IAAD;AAAM,IAAA,EAAE,mBAAYF,IAAZ,CAAR;AAA4B,IAAA,SAAS,EAAC,uBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,CADJ,EASK;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BD,IAA1B,CATL,CADJ;AAaH,CAhBkC,CAAnC;AAkBA,eAAeJ,IAAf,C,CAEA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport defaultImg from \"../assets/images/room-1.jpeg\";\nimport { Link } from 'react-router-dom';\nimport { RoomObject } from '../models/models';\n\ninterface IRoomProps {\n    room: RoomObject;\n}\n\nconst Room: React.FC<IRoomProps> = React.memo((props) => {\n    const { name, slug, images, price } = props.room;\n    // console.log(props);\n    return (\n        <article className=\"room\">\n            <div className=\"img-container\">\n                <img src={images[0] || defaultImg} alt=\"single room\" />\n                <div className=\"price-top\">\n                    <h6>${price}</h6>\n                    <p>per night</p>\n                </div>\n                <Link to={`/rooms/${slug}`} className=\"btn-primary room-link\">features</Link>\n             </div>\n             <p className=\"room-info\">{name}</p>\n        </article>\n    )\n})\n\nexport default Room;\n\n// React.memo\n// Class components can bail out from rendering when their input props are \n// the same using PureComponent or shouldComponentUpdate. Now you can do the \n// same with function components by wrapping them in React.memo.\n"]},"metadata":{},"sourceType":"module"}